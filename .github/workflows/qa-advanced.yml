name: 🚀 QA Advanced Tests - SPRINT 3.2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  qa-advanced:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run Linting
        run: npm run lint

      - name: 🏗️ Build Production
        run: npm run build

      - name: 🚀 Start Development Server
        run: npm run dev &
        env:
          PORT: 3000

      - name: ⏳ Wait for server
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'
        continue-on-error: true

      - name: 📊 Lighthouse Performance Tests
        run: npm run test:lighthouse
        continue-on-error: false

      - name: ♿ Accessibility Tests (Axe-core)
        run: npm run test:accessibility
        continue-on-error: false

      - name: ⚡ Performance Budget Tests
        run: npm run test:performance
        continue-on-error: false

      - name: 🌐 Cross-browser Tests
        run: npm run test:cross-browser
        continue-on-error: false

      - name: 📈 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  performance-baseline:
    runs-on: ubuntu-latest
    needs: qa-advanced
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚀 Start server for baseline
        run: npm run dev &
        env:
          PORT: 3000

      - name: 📊 Generate Performance Baseline
        run: |
          npm run test:lighthouse -- --reporter=json > lighthouse-results.json
          cat lighthouse-results.json

      - name: 💾 Store Performance Baseline
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline
          path: lighthouse-results.json
          retention-days: 90

  accessibility-audit:
    runs-on: ubuntu-latest
    needs: qa-advanced

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚀 Start server for accessibility audit
        run: npm run dev &
        env:
          PORT: 3000

      - name: ♿ Generate Accessibility Report
        run: |
          npm run test:accessibility -- --reporter=json > accessibility-results.json
          cat accessibility-results.json

      - name: 💾 Store Accessibility Report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: accessibility-results.json
          retention-days: 90

  quality-gate:
    runs-on: ubuntu-latest
    needs: [qa-advanced, performance-baseline, accessibility-audit]
    if: always()

    steps:
      - name: 🎯 Quality Gate Check
        run: |
          # Verificar se todos os jobs anteriores passaram
          if [[ "${{ needs.qa-advanced.result }}" == "success" && \
                "${{ needs.performance-baseline.result }}" == "success" && \
                "${{ needs.accessibility-audit.result }}" == "success" ]]; then
            echo "✅ QUALITY GATE PASSED - Ready for production!"
            echo "🎉 All advanced QA tests completed successfully"
            echo "📊 Performance: ≥95"
            echo "♿ Accessibility: WCAG 2.1 AA"
            echo "⚡ Performance Budgets: Within limits"
            echo "🌐 Cross-browser: All compatible"
            exit 0
          else
            echo "❌ QUALITY GATE FAILED"
            echo "🚨 Some QA tests failed - Review and fix issues"
            exit 1
          fi

  deploy-gate:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && needs.quality-gate.result == 'success'

    steps:
      - name: 🚀 Deploy to Production
        run: |
          echo "🎉 QUALITY GATE PASSED!"
          echo "🚀 Ready for production deployment"
          echo "📊 All metrics within acceptable ranges"
          echo "✅ Advanced QA tests: PASSED"

      - name: 📢 Notify Deployment Team
        run: |
          echo "🔥 Production deployment approved!"
          echo "Quality metrics validated:"
          echo "  • Lighthouse Performance: ≥95"
          echo "  • Accessibility Score: ≥95"
          echo "  • Performance Budgets: OK"
          echo "  • Cross-browser Compatibility: OK"
